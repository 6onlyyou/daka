// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:daka/model/fans_list_model.dart';
import 'package:daka/generated/json/fans_list_model_helper.dart';
import 'package:daka/model/user_infos_model.dart';
import 'package:daka/generated/json/user_infos_model_helper.dart';
import 'package:daka/model/fans_data_model.dart';
import 'package:daka/generated/json/fans_data_model_helper.dart';
import 'package:daka/model/user_info_model.dart';
import 'package:daka/generated/json/user_info_model_helper.dart';
import 'package:daka/model/his_list_model.dart';
import 'package:daka/generated/json/his_list_model_helper.dart';
import 'package:daka/model/gai_zhang_model.dart';
import 'package:daka/generated/json/gai_zhang_model_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {			case FansListModel:
			return fansListModelFromJson(data as FansListModel, json) as T;			case FansListData:
			return fansListDataFromJson(data as FansListData, json) as T;			case FansListDataTypeSignCount:
			return fansListDataTypeSignCountFromJson(data as FansListDataTypeSignCount, json) as T;			case UserInfosModel:
			return userInfosModelFromJson(data as UserInfosModel, json) as T;			case UserInfosData:
			return userInfosDataFromJson(data as UserInfosData, json) as T;			case UserInfosDataTypeSignCount:
			return userInfosDataTypeSignCountFromJson(data as UserInfosDataTypeSignCount, json) as T;			case FansDataModel:
			return fansDataModelFromJson(data as FansDataModel, json) as T;			case UserInfoModel:
			return userInfoModelFromJson(data as UserInfoModel, json) as T;			case UserInfoData:
			return userInfoDataFromJson(data as UserInfoData, json) as T;			case UserInfoDataTypeSignCount:
			return userInfoDataTypeSignCountFromJson(data as UserInfoDataTypeSignCount, json) as T;			case HisListModel:
			return hisListModelFromJson(data as HisListModel, json) as T;			case HisListData:
			return hisListDataFromJson(data as HisListData, json) as T;			case GaiZhangModel:
			return gaiZhangModelFromJson(data as GaiZhangModel, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {			case FansListModel:
			return fansListModelToJson(data as FansListModel);			case FansListData:
			return fansListDataToJson(data as FansListData);			case FansListDataTypeSignCount:
			return fansListDataTypeSignCountToJson(data as FansListDataTypeSignCount);			case UserInfosModel:
			return userInfosModelToJson(data as UserInfosModel);			case UserInfosData:
			return userInfosDataToJson(data as UserInfosData);			case UserInfosDataTypeSignCount:
			return userInfosDataTypeSignCountToJson(data as UserInfosDataTypeSignCount);			case FansDataModel:
			return fansDataModelToJson(data as FansDataModel);			case UserInfoModel:
			return userInfoModelToJson(data as UserInfoModel);			case UserInfoData:
			return userInfoDataToJson(data as UserInfoData);			case UserInfoDataTypeSignCount:
			return userInfoDataTypeSignCountToJson(data as UserInfoDataTypeSignCount);			case HisListModel:
			return hisListModelToJson(data as HisListModel);			case HisListData:
			return hisListDataToJson(data as HisListData);			case GaiZhangModel:
			return gaiZhangModelToJson(data as GaiZhangModel);    }
    return data as T;
  }
  //Go back to a single instance by type
  static _fromJsonSingle(String type, json) {
    switch (type) {			case 'FansListModel':
			return FansListModel().fromJson(json);			case 'FansListData':
			return FansListData().fromJson(json);			case 'FansListDataTypeSignCount':
			return FansListDataTypeSignCount().fromJson(json);			case 'UserInfosModel':
			return UserInfosModel().fromJson(json);			case 'UserInfosData':
			return UserInfosData().fromJson(json);			case 'UserInfosDataTypeSignCount':
			return UserInfosDataTypeSignCount().fromJson(json);			case 'FansDataModel':
			return FansDataModel().fromJson(json);			case 'UserInfoModel':
			return UserInfoModel().fromJson(json);			case 'UserInfoData':
			return UserInfoData().fromJson(json);			case 'UserInfoDataTypeSignCount':
			return UserInfoDataTypeSignCount().fromJson(json);			case 'HisListModel':
			return HisListModel().fromJson(json);			case 'HisListData':
			return HisListData().fromJson(json);			case 'GaiZhangModel':
			return GaiZhangModel().fromJson(json);    }
    return null;
  }

  //empty list is returned by type
  static _getListFromType(String type) {
    switch (type) {			case 'FansListModel':
			return List<FansListModel>();			case 'FansListData':
			return List<FansListData>();			case 'FansListDataTypeSignCount':
			return List<FansListDataTypeSignCount>();			case 'UserInfosModel':
			return List<UserInfosModel>();			case 'UserInfosData':
			return List<UserInfosData>();			case 'UserInfosDataTypeSignCount':
			return List<UserInfosDataTypeSignCount>();			case 'FansDataModel':
			return List<FansDataModel>();			case 'UserInfoModel':
			return List<UserInfoModel>();			case 'UserInfoData':
			return List<UserInfoData>();			case 'UserInfoDataTypeSignCount':
			return List<UserInfoDataTypeSignCount>();			case 'HisListModel':
			return List<HisListModel>();			case 'HisListData':
			return List<HisListData>();			case 'GaiZhangModel':
			return List<GaiZhangModel>();    }
    return null;
  }

  static M fromJsonAsT<M>(json) {
    String type = M.toString();
    if (json is List && type.contains("List<")) {
      String itemType = type.substring(5, type.length - 1);
      List tempList = _getListFromType(itemType);
      json.forEach((itemJson) {
        tempList
            .add(_fromJsonSingle(type.substring(5, type.length - 1), itemJson));
      });
      return tempList as M;
    } else {
      return _fromJsonSingle(M.toString(), json) as M;
    }
  }
}